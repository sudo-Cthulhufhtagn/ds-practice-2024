version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 3000 of the container to port 8080 on the host
      - "8080:3000"
    volumes:
      # Mount the frontend directory to the /app directory in the container
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
    depends_on:
      - orchestrator
    networks:
      - monitoring
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
    depends_on:
  #     - fraud_detection
  #     - transaction_verification
  #     - suggestion
      - queue
      - executor
    networks:
      - monitoring
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    # ports:
    #   # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
    #   - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
    networks:
      - monitoring
  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./transaction_verification/Dockerfile
    # ports:
    #   # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
    #   - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src
    networks:
      - monitoring
  suggestion:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./suggestion/Dockerfile
    # ports:
    #   # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
    #   - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/suggestion/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./suggestion/src:/app/suggestion/src
    networks:
      - monitoring
  queue:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./queue/Dockerfile
    # ports:
    #   # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
    #   - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/queue/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./queue/src:/app/queue/src
    networks:
      - monitoring
  executor:
    # hostname: executor
    # container_name: executor
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./executor/Dockerfile
    # ports:
    # #   # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
    #   - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/executor/src/app.py
      - SLOT="{{.Task.Slot}}"
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./executor/src:/app/executor/src
      # mount docker socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    deploy:
      replicas: 3
  
  database:
    # hostname: executor
    # container_name: executor
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./database/Dockerfile
    # ports:
    # #   # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
    #   - 50060:50055
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/database/src/app.py
      - SLOT="{{.Task.Slot}}"
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./database/src:/app/database/src
      # mount docker socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    deploy:
      replicas: 3

  payment:
    # hostname: executor
    # container_name: executor
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./payment/Dockerfile
    # ports:
    # #   # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
    #   - 50060:50055
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/payment/src/app.py
      - SLOT="{{.Task.Slot}}"
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./payment/src:/app/payment/src
      # mount docker socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring

  # Node Exporter for Docker metrics
  node-exporter:
    image: prom/node-exporter:v1.2.2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    networks:
      - monitoring

  # Prometheus service
  prometheus:
    image: prom/prometheus:v2.26.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  # Grafana service
  grafana:
    image: grafana/grafana:7.5.7
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
